lk.

declare EfficientMetro, StrikeMetro, UseMetro: bool.
declare r1: (EfficientMetro -> UseMetro).
declare r2: (StrikeMetro -> ~EfficientMetro).
declare a1: (EfficientMetro).
declare a2: (StrikeMetro).

declare ax : (~EfficientMetro).

theorem arg1: (UseMetro).
cut (EfficientMetro -> UseMetro) th.
axiom r1.
elim.
axiom a1.
axiom.
qed.

theorem arg2: (~EfficientMetro).
cut (StrikeMetro -> ~EfficientMetro) th.
axiom r2.
elim.
axiom a2.
axiom.
qed.

theorem inconsistency: (false).
cut (EfficientMetro) th.
axiom a1.
cut (~EfficientMetro) th2.
axiom arg2.
elim.
axiom.
qed.

# Counterargument in negation-expanded form

start argument arg1 ~EfficientMetro
elim.
cut (~EfficientMetro) nef.
cut (StrikeMetro -> ~EfficientMetro) th.
axiom r2.
elim.
next.
axiom.
elim.
axiom.
end argument

start argument arg2 UseMetro
cut (EfficientMetro -> UseMetro) th.
axiom r1.
elim.
next.
axiom.
end argument

# start argument undercut ~EfficientMetro
# elim.
# tactic pop EfficientMetro UseMetro
# end argument

# theorem undercut: (~EfficientMetro).
# cut (EfficientMetro) issue.
# tactic pop EfficientMetro UseMetro
# elim.
# axiom a2.
# # replace by axiom to end proof early:
# elim.
# tactic pop EfficientMetro UseMetro
# axiom a1.
# axiom r1.
# axiom a1.

# theorem undercut: (~EfficientMetro).
# cut (EfficientMetro) issue.
# tactic pop EfficientMetro UseMetro
# cut (~EfficientMetro) attacker.
# next.
# elim.
# axiom.
# axiom.


# theorem undercut: (~EfficientMetro).
# elim.
# cut (EfficientMetro->UseMetro) stash.
# tactic pop EfficientMetro UseMetro

# axiom.
# axiom.
# cut (EfficientMetro->UseMetro) stash.
# next.
# elim.
# next.
# next.
# axiom.
# next.
# axiom.
# next.
# axiom.